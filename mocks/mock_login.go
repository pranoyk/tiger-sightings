// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/login.go
//
// Generated by this command:
//
//	mockgen -source=./service/login.go -destination=./mocks/mock_login.go -package=mocks github.com/pranoyk/tiger-sightings/service Login
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	customerr "github.com/pranoyk/tiger-sightings/custom-err"
	model "github.com/pranoyk/tiger-sightings/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLogin is a mock of Login interface.
type MockLogin struct {
	ctrl     *gomock.Controller
	recorder *MockLoginMockRecorder
}

// MockLoginMockRecorder is the mock recorder for MockLogin.
type MockLoginMockRecorder struct {
	mock *MockLogin
}

// NewMockLogin creates a new mock instance.
func NewMockLogin(ctrl *gomock.Controller) *MockLogin {
	mock := &MockLogin{ctrl: ctrl}
	mock.recorder = &MockLoginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogin) EXPECT() *MockLoginMockRecorder {
	return m.recorder
}

// LogIn mocks base method.
func (m *MockLogin) LogIn(ctx context.Context, user *model.LoginRequest) (string, *customerr.APIError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*customerr.APIError)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockLoginMockRecorder) LogIn(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockLogin)(nil).LogIn), ctx, user)
}
