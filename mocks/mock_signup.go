// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/signup.go
//
// Generated by this command:
//
//	mockgen -source=./service/signup.go -destination=./mocks/mock_signup.go -package=mocks github.com/pranoyk/tiger-sightings/service SignUpUser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	customerr "github.com/pranoyk/tiger-sightings/custom-err"
	model "github.com/pranoyk/tiger-sightings/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSignUpUser is a mock of SignUpUser interface.
type MockSignUpUser struct {
	ctrl     *gomock.Controller
	recorder *MockSignUpUserMockRecorder
}

// MockSignUpUserMockRecorder is the mock recorder for MockSignUpUser.
type MockSignUpUserMockRecorder struct {
	mock *MockSignUpUser
}

// NewMockSignUpUser creates a new mock instance.
func NewMockSignUpUser(ctrl *gomock.Controller) *MockSignUpUser {
	mock := &MockSignUpUser{ctrl: ctrl}
	mock.recorder = &MockSignUpUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignUpUser) EXPECT() *MockSignUpUserMockRecorder {
	return m.recorder
}

// SignUp mocks base method.
func (m *MockSignUpUser) SignUp(ctx context.Context, user *model.SignUpUserRequest) *customerr.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, user)
	ret0, _ := ret[0].(*customerr.APIError)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockSignUpUserMockRecorder) SignUp(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockSignUpUser)(nil).SignUp), ctx, user)
}
