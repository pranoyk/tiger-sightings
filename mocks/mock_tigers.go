// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/tigers.go
//
// Generated by this command:
//
//	mockgen -source=./service/tigers.go -destination=./mocks/mock_tigers.go -package=mocks github.com/pranoyk/tiger-sightings/service Tiger
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	customerr "github.com/pranoyk/tiger-sightings/custom-err"
	model "github.com/pranoyk/tiger-sightings/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTiger is a mock of Tiger interface.
type MockTiger struct {
	ctrl     *gomock.Controller
	recorder *MockTigerMockRecorder
}

// MockTigerMockRecorder is the mock recorder for MockTiger.
type MockTigerMockRecorder struct {
	mock *MockTiger
}

// NewMockTiger creates a new mock instance.
func NewMockTiger(ctrl *gomock.Controller) *MockTiger {
	mock := &MockTiger{ctrl: ctrl}
	mock.recorder = &MockTigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTiger) EXPECT() *MockTigerMockRecorder {
	return m.recorder
}

// CreateTiger mocks base method.
func (m *MockTiger) CreateTiger(arg0 context.Context, arg1 *model.CreateTigerRequest, arg2 string) *customerr.APIError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTiger", arg0, arg1, arg2)
	ret0, _ := ret[0].(*customerr.APIError)
	return ret0
}

// CreateTiger indicates an expected call of CreateTiger.
func (mr *MockTigerMockRecorder) CreateTiger(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTiger", reflect.TypeOf((*MockTiger)(nil).CreateTiger), arg0, arg1, arg2)
}
